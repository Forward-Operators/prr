#!/usr/bin/env python3.10

import os
import sys

sys.path.append('.')
sys.path.append('/opt/conda/lib/python3.10/site-packages')

import argparse
from dotenv import load_dotenv
load_dotenv()

from rich import print
from rich.console import Console
from rich.panel import Panel

from lib.prompts.loader import PromptLoader
from lib.runs.config import ConfigLoader
from lib.runs.runner import Runner

console = Console(log_time=False, log_path=False)

parser = argparse.ArgumentParser(description="Run a prompt against configured models.",
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument('--abbrev', help="Abbreviate prompts and completions", action=argparse.BooleanOptionalAction, default=True)
parser.add_argument('--min_delay', '-d', help="Sleep for N seconds between re-runs", default=0)
parser.add_argument("--model", "-m", help="Model to use if none is configured (defaults to DEFAULT_MODEL environment variable)", default=os.environ.get('DEFAULT_MODEL'))
parser.add_argument("prompt_path", help="Path to prompt to monitor")
args = parser.parse_args()
parsed_args = vars(args)

prompt_path = parsed_args["prompt_path"]
abbrev = parsed_args["abbrev"]
model = parsed_args["model"]

prompt = PromptLoader(prompt_path).load()
config_loader = ConfigLoader(prompt)
config_path = config_loader.config_path

info_message = f"ðŸ‘€ watching for changes on {prompt_path} and {config_path}"

if parsed_args['min_delay'] != None:
  if parsed_args['min_delay'] > 0:
    info_message += f" with min {parsed_args['min_delay']}s delay between re-runs."
  else:
    info_message += f" with no delay between re-runs."

console.log(info_message)

# loop:
#   prompt_path_exists = os.path.exists(prompt_path)
#   config_path_exists = os.path.exists(config_path)
